#!/bin/bash
# build-linux-server.sh - Simple Cal.com build for Linux servers
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–º Docker Engine –±–µ–∑ buildx –∏–ª–∏ GitHub CLI

set -e

echo "üöÄ –°–±–æ—Ä–∫–∞ Cal.com –¥–ª—è Linux —Å–µ—Ä–≤–µ—Ä–∞..."
echo ""

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Docker
if ! docker --version &> /dev/null; then
    echo "‚ùå –û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit 1
fi

echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
echo "  Docker: $(docker --version)"
echo "  Platform: $(uname -m)"
echo "  OS: $(uname -s)"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:"
required_files=("package.json" "yarn.lock" ".yarnrc.yml" "turbo.json" "i18n.json" "Dockerfile.root")
missing_files=()

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file"
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -ne 0 ]; then
    echo ""
    echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:"
    printf '  - %s\n' "${missing_files[@]}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo ""
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:"
required_dirs=("apps" "packages" "scripts")
for dir in "${required_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "  ‚úÖ $dir/ ($(ls "$dir" | wc -l) —ç–ª–µ–º–µ–Ω—Ç–æ–≤)"
    else
        echo "  ‚ùå $dir/"
        exit 1
    fi
done

echo ""

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
PUSH_IMAGE=${PUSH_IMAGE:-true}
if [ "$PUSH_IMAGE" = "true" ]; then
    echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ GHCR..."
    
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GITHUB_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        echo "$GITHUB_TOKEN" | docker login ghcr.io -u writepavel --password-stdin
    elif [ -n "$GHCR_TOKEN" ]; then
        echo "  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GHCR_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        echo "$GHCR_TOKEN" | docker login ghcr.io -u writepavel --password-stdin
    elif command -v gh &> /dev/null; then
        echo "  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GitHub CLI"
        gh auth token | docker login ghcr.io -u writepavel --password-stdin
    else
        echo ""
        echo "‚ö†Ô∏è  –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!"
        echo "  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:"
        echo "    1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ GITHUB_TOKEN: export GITHUB_TOKEN=your_token"
        echo "    2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ GHCR_TOKEN: export GHCR_TOKEN=your_token" 
        echo "    3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GitHub CLI: apt install gh"
        echo "    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ push: PUSH_IMAGE=false $0"
        echo ""
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ push? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        PUSH_IMAGE=false
    fi
fi

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–≥–∏ –æ–±—Ä–∞–∑–∞
IMAGE_REPO="ghcr.io/writepavel/cal.com"
BUILD_DATE=$(date +%Y%m%d-%H%M%S)
IMAGE_TAGS=(
    "${IMAGE_REPO}:linux-zoho-fix"
    "${IMAGE_REPO}:linux-latest"
    "${IMAGE_REPO}:linux-${BUILD_DATE}"
)

echo ""
echo "üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É..."
echo "  üìÅ Dockerfile: Dockerfile.root"
echo "  üè∑Ô∏è –¢–µ–≥–∏ –æ–±—Ä–∞–∑–∞:"
for tag in "${IMAGE_TAGS[@]}"; do
    echo "    - $tag"
done
echo "  ‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞ Linux: 15-30 –º–∏–Ω—É—Ç"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å buildx –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π docker build
if docker buildx version &> /dev/null; then
    echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è docker buildx"
    BUILD_CMD="docker buildx build --platform linux/amd64 --load"
else
    echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π docker build"
    BUILD_CMD="docker build"
fi

# –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏
TAG_ARGS=""
for tag in "${IMAGE_TAGS[@]}"; do
    TAG_ARGS="$TAG_ARGS -t $tag"
done

# –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É
$BUILD_CMD \
  -f Dockerfile.root \
  $TAG_ARGS \
  --build-arg NEXT_PUBLIC_LICENSE_CONSENT=agree \
  --build-arg CALCOM_TELEMETRY_DISABLED=1 \
  --build-arg DATABASE_URL=postgresql://placeholder:placeholder@placeholder:5432/placeholder \
  --build-arg NEXTAUTH_SECRET=docker-build-secret \
  --build-arg CALENDSO_ENCRYPTION_KEY=docker-build-key-change-in-production-32bytes \
  .

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    
    # Push –æ–±—Ä–∞–∑—ã –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if [ "$PUSH_IMAGE" = "true" ]; then
        echo "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ GHCR..."
        for tag in "${IMAGE_TAGS[@]}"; do
            echo "  Pushing $tag..."
            docker push "$tag"
        done
        echo ""
        echo "‚úÖ –í—Å–µ –æ–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ GHCR!"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–µ
        echo ""
        echo "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –æ–±—Ä–∞–∑–µ:"
        if docker buildx version &> /dev/null; then
            docker buildx imagetools inspect "${IMAGE_TAGS[0]}" || true
        fi
    else
        echo "‚è≠Ô∏è  Push –ø—Ä–æ–ø—É—â–µ–Ω (–æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ)"
    fi
    
    echo ""
    echo "üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã:"
    docker images | grep "${IMAGE_REPO}" || echo "–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
    
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –≤ GHCR:"
    for tag in "${IMAGE_TAGS[@]}"; do
        echo "  - $tag"
    done
    
    echo ""
    echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
    echo "  docker pull ${IMAGE_TAGS[0]}"
    echo ""
    echo "  docker run -d \\"
    echo "    --name calcom-linux \\"
    echo "    -e ZOHOCALENDAR_CLIENT_ID=your-client-id \\"
    echo "    -e ZOHOCALENDAR_CLIENT_SECRET=your-client-secret \\"
    echo "    -e DATABASE_URL=your-database-url \\"
    echo "    -e NEXTAUTH_SECRET=your-secret \\"
    echo "    -e CALENDSO_ENCRYPTION_KEY=your-key \\"
    echo "    -e NEXT_PUBLIC_WEBAPP_URL=https://your-domain.com \\"
    echo "    -p 3000:3000 \\"
    echo "    ${IMAGE_TAGS[0]}"
    
else
    echo ""
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
    echo ""
    echo "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "  1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"
    echo "  2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4GB+)"
    echo "  3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo ""
    echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
    echo "  - –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ: docker system prune -a"
    echo "  - –£–≤–µ–ª–∏—á–∏—Ç—å swap –ø–∞–º—è—Ç—å"
    echo "  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
    exit 1
fi